{"version":3,"sources":["features/Todo/toDoSlice.js","features/Todo/List.js","features/Todo/Todo.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["toDoSlice","createSlice","name","initialState","value","reducers","updateValue","state","action","payload","actions","List","listItem","useSelector","todo","useState","totalCheck","setTotalCheck","className","map","item","i","htmlFor","aria-label","id","type","onClick","e","target","checked","length","data-testid","ToDo","dispatch","useDispatch","search","setSearch","list","setList","handleSubmit","newlist","maxLength","placeholder","onChange","onKeyPress","key","App","configureStore","reducer","toDoReducer","preloadedState","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAEaA,EAAYC,YAAY,CACnCC,KAAM,OACNC,aAAc,CACZC,MAAO,IAETC,SAAU,CACRC,YAAa,SAACC,EAAOC,GACnBD,EAAMH,MAAQI,EAAOC,YAKZH,EAAgBN,EAAUU,QAA1BJ,YAKAN,IAAf,QChBe,SAASW,IAEtB,IAAMC,EAAWC,aAAY,SAACN,GAC5B,OAAOA,EAAMO,KAAKV,SAHS,EAMKW,mBAAS,GANd,mBAMxBC,EANwB,KAMZC,EANY,KAe7B,OACE,sBAAKC,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,8BAGA,qBAAKA,UAAU,YAAf,SAEIN,EAASO,KAAI,SAACC,EAAMC,GAAP,OACX,qBAAKH,UAAU,cAAf,SACE,wBAAOA,UAAU,WAAWI,QAAO,eAAUD,GAA7C,UACE,uBAAOE,aAAW,WAAWC,GAAE,eAAUH,GAAKI,KAAK,WAAWC,QAAS,SAACC,GAlBlE,IAACvB,IAkBqFuB,EAAEC,OAAOC,QAhB/GZ,EADEb,EACYY,EAAa,EAEbA,EAAa,MAehBI,MAH6BC,QAUtCT,EAASkB,OAAS,GAClB,sBAAKZ,UAAU,oBAAf,UACE,sBAAMA,UAAU,2BAAhB,0BACA,sBAAMM,GAAG,QAAQO,cAAY,QAA7B,SACGf,IAEH,0CACOJ,EAASkB,gBCtCnB,SAASE,IACd,IAAMC,EAAWC,cADI,EAGOnB,mBAAS,IAHhB,mBAGdoB,EAHc,KAGNC,EAHM,OAIGrB,mBAAS,IAJZ,mBAIdsB,EAJc,KAIRC,EAJQ,KAMfC,EAAe,WACnB,IAAMC,EAAO,sBAAOH,GAAP,CAAaF,IAC1BG,EAAQE,GACRP,EAAS3B,EAAYkC,IACrBJ,EAAU,KAKZ,OACE,qBAAKlB,UAAU,MAAf,SACE,qBAAKA,UAAU,aAAf,SACE,gCACE,oBAAIA,UAAU,2BAAd,wBACA,sBAAKA,UAAU,kBAAf,UACE,uBAAOK,aAAW,UAAUkB,UAAU,KAAKvB,UAAU,QAAQO,KAAK,OAAOiB,YAAY,wBAAcC,SARnF,SAAChB,GAAQS,EAAUT,EAAEC,OAAOxB,QAQoFwC,WATnH,SAACjB,GAAsB,UAAVA,EAAEkB,KAA6BN,KASmGnC,MAAO+B,IACnK,wBAAQjB,UAAU,iBAAiBK,aAAW,SAASC,GAAG,SAASE,QAASa,EAA5E,wBAEF,cAAC5B,EAAD,WCdKmC,MAXf,WAEE,OACE,qBAAK5B,UAAU,MAAf,SACE,qBAAKA,UAAU,aAAf,SACE,cAACc,EAAD,SCNOe,cAAe,CAC5BC,QAAS,CACPlC,KAAMmC,GAERC,eAAgB,CACdpC,KAAM,CACJV,MAAO,OCGO+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c669ec1f.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const toDoSlice = createSlice({\n  name: 'todo',\n  initialState: {\n    value: [],\n  },\n  reducers: {\n    updateValue: (state, action) => {\n      state.value = action.payload;\n    }\n  },\n});\n\nexport const { updateValue } = toDoSlice.actions;\n\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n// export const selectValue = state => state.todo.value;\n\nexport default toDoSlice.reducer;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectValue } from './toDoSlice';\nexport default function List() {\n  // const listItem = useSelector(selectValue);\n  const listItem = useSelector((state) => {\n    return state.todo.value;\n  });\n\n  let [totalCheck, setTotalCheck] = useState(0);\n  const handleClick = (value) => {\n    if (value) {\n      setTotalCheck(totalCheck + 1);\n    } else {\n      setTotalCheck(totalCheck - 1);\n    }\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">\n        Keeping in Track\n            </p>\n      <div className=\"checklist\" >\n        {\n          listItem.map((item, i) => (\n            <div className=\"panel-block\" key={i} >\n              <label className=\"checkbox\" htmlFor={`item-${i}`} >\n                <input aria-label=\"checkbox\" id={`item-${i}`} type=\"checkbox\" onClick={(e) => { handleClick(e.target.checked) }} />\n                {item}\n              </label>\n            </div>\n          ))\n        }\n      </div>\n      {\n        listItem.length > 0 &&\n        <div className=\"panel-block total\">\n          <span className=\"is-outlined is-fullwidth\"> Completed: </span>\n          <span id=\"total\" data-testid=\"total\">\n            {totalCheck}\n          </span>\n          <span>\n            {`/${listItem.length}`}\n          </span>\n        </div>\n      }\n    </nav>\n  )\n}","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateValue, } from './toDoSlice';\nimport List from './List';\n\nexport function ToDo() {\n  const dispatch = useDispatch();\n\n  const [search, setSearch] = useState('');\n  const [list, setList] = useState([]);\n\n  const handleSubmit = () => {\n    const newlist = [...list, search]\n    setList(newlist);\n    dispatch(updateValue(newlist));\n    setSearch('');\n  };\n  const handleKeyPress = (e) => { if (e.key === 'Enter') { debugger; handleSubmit() } }\n  const handleInputChange = (e) => { setSearch(e.target.value); }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <div>\n          <h1 className=\"has-text-black is-size-1\">To Do Test</h1>\n          <div className=\"input-container\">\n            <input aria-label=\"textbox\" maxLength=\"20\" className=\"input\" type=\"text\" placeholder=\"Feed the 🐱\" onChange={handleInputChange} onKeyPress={handleKeyPress} value={search} />\n            <button className=\"button is-link\" aria-label=\"submit\" id=\"submit\" onClick={handleSubmit}> Submit</button>\n          </div>\n          <List />\n        </div>\n      </div>\n    </div>\n  );\n}","import './App.css';\r\nimport React from 'react';\r\nimport { ToDo } from './features/Todo/Todo';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <ToDo />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport toDoReducer from '../features/Todo/toDoSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    todo: toDoReducer\r\n  },\r\n  preloadedState: {\r\n    todo: {\r\n      value: [],\r\n    }\r\n  },\r\n});","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}